{"version":3,"sources":["services/country-service.js","Home/Home.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["ContryService","actionType","param","this","url","fetch","proxyurl","method","headers","response","json","body","console","log","Home","props","state","countryArray","selectedCountry","contryService","setUrl","getCountry","then","res","setState","date","className","map","elemnt","index","temperatureC","temperatureF","summary","Component","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"+TAEaA,EAAb,+FAEWC,EAAYC,GACf,OAAQD,GACJ,IAAK,MACDE,KAAKC,IAAL,mDACA,MAEJ,IAAK,iBACDD,KAAKC,IAAL,gDAAoDF,EAApD,sDACA,MAEJ,QACIC,KAAKC,IAAL,sDAbhB,qKA2B6B,uCA3B7B,SA4BiCC,MAAMC,8FAAoE,CAAEC,OAAQ,MAAOC,QAAS,CACrH,eAAgB,OAChB,YAAe,UACf,8BAAgC,2BA/BhD,cA4BgBC,EA5BhB,gBAiC6BA,EAASC,OAjCtC,cAiCgBC,EAjChB,yBAkCmBA,GAlCnB,kCAqCYC,QAAQC,IAAR,MArCZ,uHCwDeC,E,kDAnDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,aAAc,GACdC,gBAAiB,IAGrB,EAAKC,cAAgB,IAAInB,EAEzB,EAAKmB,cAAcC,OAAO,OAC1B,EAAKD,cAAcE,aAAaC,MAC5B,SAACC,GAEG,EAAKC,SAAS,CACVP,aAAcM,EACdL,gBAAiBK,EAAI,GAAGE,UAhBrB,E,qDA2Bf,OACI,yBAAKC,UAAU,OAEX,6BACI,+BAEQvB,KAAKa,MAAMC,aAAaU,KAAI,SAACC,EAAQC,GAAT,OACxB,4BACJ,4BAAKD,EAAOH,MACZ,4BAAKG,EAAOE,cACZ,4BAAKF,EAAOG,cACZ,4BAAKH,EAAOI,oB,GAxCrBC,aCYJC,MAZf,WACE,OACE,yBAAKR,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKS,IAAKC,IAAMV,UAAU,WAAWW,IAAI,SACzC,kBAAC,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.965d9ef8.chunk.js","sourcesContent":["//import countryInfo from \"../components/CountryInfo/ComponentInfo\";\r\n\r\nexport class ContryService {\r\n\r\n    setUrl(actionType, param) {\r\n        switch (actionType) {\r\n            case \"ALL\":\r\n                this.url = `https://restcountries.eu/rest/v2/all?fields=name`;\r\n                break;\r\n\r\n            case \"SINGLE_COUNTRY\":\r\n                this.url = `https://restcountries.eu/rest/v2/name/${param}?fullText=true&fields=borders;alpha3Code;flag;name`;\r\n                break;\r\n\r\n            default:\r\n                this.url = `https://restcountries.eu/rest/v2/all?fields=name`;\r\n                break;\r\n        }\r\n\r\n       // this.getCountry\r\n    }\r\n\r\n\r\n    /** \r\n     *@function getCountry - this function exec a http req\r\n     *@returns response.json - the result that we got from the http req\r\n    */\r\n    async getCountry() {\r\n        try {\r\n            const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n            let response = await fetch(proxyurl+'https://stboardserver.azurewebsites.net/weatherforecast', { method: \"GET\", headers: {\r\n                'Content-Type': 'text',\r\n                'credentials': \"include\", \r\n                'Access-Control-Allow-Origin':  'http://127.0.0.1:3000'\r\n              } });\r\n            let body = await response.json();\r\n            return body;\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/*\r\nfunction : fetch\r\nparameters:\r\n1) url (server address) - string;\r\n2) request options - {\r\n    body\r\n    headers\r\n    method\r\n}\r\n\r\nreturns:\r\nPromise<Response>\r\n*/","import React, { Component } from 'react';\r\nimport { ContryService } from '../services/country-service';\r\n//import CountryInfo from './../CountryInfo/ComponentInfo';\r\n//import { Country } from './../../models/country';\r\n\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            countryArray: [],\r\n            selectedCountry: {}\r\n        };\r\n\r\n        this.contryService = new ContryService();\r\n\r\n        this.contryService.setUrl(\"ALL\");\r\n        this.contryService.getCountry().then(\r\n            (res) => {\r\n                debugger;\r\n                this.setState({\r\n                    countryArray: res,\r\n                    selectedCountry: res[0].date\r\n                })\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n   \r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n\r\n                <div>\r\n                    <table>\r\n                    {\r\n                            this.state.countryArray.map((elemnt, index) => (\r\n                                <th>\r\n                            <tr>{elemnt.date}</tr>\r\n                            <tr>{elemnt.temperatureC}</tr>\r\n                            <tr>{elemnt.temperatureF}</tr>\r\n                            <tr>{elemnt.summary}</tr>\r\n                            </th>\r\n                            ))}\r\n                        </table>\r\n                    \r\n                   \r\n                \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './Home/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Home/>\n    \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}